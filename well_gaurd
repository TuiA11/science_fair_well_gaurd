<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Well Gaurd</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background-color: #f4f4f9;
      padding: 20px;
    }
    h1 {
      color: #333;
    }
    #nivel {
      font-size: 2em;
      font-weight: bold;
      margin: 20px;
    }
    #leds {
      font-size: 1.5em;
      margin-top: 20px;
    }
    .btn {
      padding: 10px 20px;
      font-size: 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
    .btn:hover {
      background-color: #45a049;
    }
  </style>
</head>
<body>
  <h1>Well gaurd</h1>
  <button class="btn" id="connect">Conect to Bluetooth</button>
  <div id="nivel">Water Level: -- cm</div>
  <div id="leds">LEDs: --</div>

  <script>
    let bluetoothDevice;
    let bluetoothCharacteristic;
    
    // Función para conectar al dispositivo Bluetooth
    async function connectToBluetooth() {
      try {
        // Solicitar dispositivo Bluetooth
        bluetoothDevice = await navigator.bluetooth.requestDevice({
          filters: [{ services: ['battery_service'] }] // Usa el servicio adecuado si el Arduino está configurado con otro servicio
        });

        // Conectar al dispositivo y obtener las características
        const server = await bluetoothDevice.gatt.connect();
        const service = await server.getPrimaryService('battery_service'); // Cambia el servicio a uno adecuado
        bluetoothCharacteristic = await service.getCharacteristic('battery_level'); // Característica que el Arduino va a enviar

        console.log('Conectado a', bluetoothDevice.name);

        // Iniciar la lectura de los datos
        setInterval(readData, 1000); // Leer cada segundo

      } catch (error) {
        console.log('Error al conectar con Bluetooth:', error);
        alert('No se pudo conectar al dispositivo Bluetooth.');
      }
    }

    // Función para leer datos del dispositivo Bluetooth
    async function readData() {
      if (bluetoothCharacteristic) {
        try {
          const value = await bluetoothCharacteristic.readValue();
          const nivelAgua = value.getUint8(0); // Suponiendo que el Arduino envía un valor de distancia en cm
          updateLevel(nivelAgua);
        } catch (error) {
          console.log('Error al leer los datos:', error);
        }
      }
    }

    // Actualizar la interfaz con el nivel de agua
    function updateLevel(nivel) {
      const nivelElemento = document.getElementById('nivel');
      const ledsElemento = document.getElementById('leds');
      
      nivelElemento.textContent = `Nivel de agua: ${nivel} cm`;
      
      // Lógica para actualizar el estado de los LEDs
      if (nivel < 10) {
        ledsElemento.textContent = "LED Verde: ON";
      } else if (nivel >= 10 && nivel < 15) {
        ledsElemento.textContent = "LED Amarillo 1: ON";
      } else if (nivel >= 15 && nivel < 20) {
        ledsElemento.textContent = "LED Amarillo 2: ON";
      } else {
        ledsElemento.textContent = "LED Rojo: ON";
      }
    }

    // Iniciar conexión al hacer clic en el botón
    document.getElementById('connect').addEventListener('click', connectToBluetooth);
  </script>
</body>
</html>
